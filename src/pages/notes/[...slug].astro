---
// get all permalinks with weird slug name
export const prerender = false;
import { getCollection, type CollectionEntry, getEntry } from "astro:content";
import Layout from "../../layouts/Layout.astro";
import Container from "../../layouts/Container.astro";
import { dateRegex } from "../../lib/constants";
import { makeDateStringIntoDate, formatDate } from "../../lib/utils";
import Note from "../../components/Note.astro";
import { ChevronLeft } from "lucide-astro";
const { slug } = Astro.params;

if (slug === undefined) {
  throw new Error("No slug provided");
}

const entry =
  (await getEntry("lab", slug)) ?? (await getEntry("obsidian", slug));
if (!entry) {
  return Astro.redirect("/404");
}
const date =
  dateRegex.test(entry.id) && entry.collection === "lab"
    ? makeDateStringIntoDate(entry.id)
    : null;

// export async function getStaticPaths() {
//   const blogEntries = await getCollection("lab");
//   const noteEntries = await getCollection("obsidian");
//   const notes = noteEntries.map((entry) => ({
//     params: {
//       slug: entry.slug,
//     },
//     props: {
//       entry,
//     },
//   }));
//   const ret = [...blogEntries, ...noteEntries].map((entry) => ({
//     params: {
//       slug:
//         dateRegex.test(entry.slug) && entry.collection === "lab"
//           ? entry.slug.replace(dateRegex, "").slice(1)
//           : entry.slug,
//     },
//     props: {
//       entry,
//       date:
//         dateRegex.test(entry.id) && entry.collection === "lab"
//           ? makeDateStringIntoDate(entry.id)
//           : null,
//     },
//   }));
//   return ret;
// }

// interface Props {
//   entry: CollectionEntry<"notes">;
//   date: Date | null;
// }

// const { entry, date } = Astro.props;

// // this isn't ideal, but oh well
const title = entry.data.title ?? entry.id.split(".")[0].replace(/-/g, " ");
---

<script>
  import { navigate } from "astro:transitions/client";

  function setup() {
    const note = document.getElementById("note-container");
    console.log({ note });
    note?.addEventListener("click", (e) => {
      if (e.target instanceof HTMLAnchorElement) {
        console.log("clicked");
        console.log({ e });
        const href = e.target.getAttribute("href");
        const currentPath = window.location.pathname;
        const currentUrl = new URL(window.location.href);
        console.log({ href, currentPath });
        if (!currentPath.startsWith("/notes") && !href?.startsWith("/notes"))
          return;

        const currentSlug = currentPath.split("/").pop();

        const stacked =
          currentUrl.searchParams.get("stacked")?.split(",") ?? [];

        const nextSlug = href?.split("/").pop();

        if (!nextSlug) return;
        if (!currentSlug) return;

        if (stacked.includes(nextSlug)) {
          const index = stacked.indexOf(nextSlug);
          stacked.splice(stacked.indexOf(nextSlug), stacked.length - index);
        }

        if (!stacked.includes(currentSlug)) {
          stacked.unshift(currentSlug);
        }
        console.log({ stacked });

        const nextHref = `/notes/${nextSlug}${
          stacked.length > 0 ? `?stacked=${stacked.join(",")}` : ""
        }`;
        e.preventDefault();

        console.log({ nextHref });
        navigate(nextHref, { history: "push" });
      }
    });
  }

  document.addEventListener("astro:page-load", setup);
</script>
<Layout title={title}>
  <Container>
    <div class="flex flex-col gap-8">
      <a
        style="view-transition-name: lab-notes;"
        href="/notes"
        class="bg-rose-500 flex items-center text-white w-fit px-2 py-4 rounded hover:text-rose-500 hover:bg-white font-bold font-sans"
      >
        <ChevronLeft class="inline-block mr-2" />
        <span>Lab Notes</span>
      </a>
      <Note
        entry={{
          ...entry,
          data: {
            ...entry.data,
            title,
          },
        }}
        date={entry.data.pubDate ?? date}
      />
    </div>
  </Container>
</Layout>
