---

export const prerender = false;

import { getCollection, type CollectionEntry } from "astro:content";
import Layout from "../layouts/Layout.astro";
import Card from "./Card.svelte";
import H1 from "./H1.astro";
import Header from "./Header.astro";
import Container from "../layouts/Container.astro";
import ProjectTabs from "./projects/project-tabs.astro";
import ProjectFilter from "./projects/project-filter.svelte";
import { ListFilter } from "lucide-astro";

type Project = CollectionEntry<"projects">;

interface Props {
  scope?: Project["data"]["scope"];
}

console.log({ url: Astro.url.search });

const { scope } = Astro.props;


const projects = (
  await getCollection("projects", ({ data }) => {
    if (scope) {
      return data.scope === scope;
    }
    return true;
  })
).sort((a, b) => {
  return b.data.pubDate.valueOf() - a.data.pubDate.valueOf();
});

const tags = Array.from(new Set(projects.flatMap((project) => project.data.tags)));
const technologies = Array.from(new Set(projects.flatMap((project) => project.data.technologies)));
---

<!-- TODO: alternate grid where I do three columns, and divide up array into columns -->
<Layout useViewTransitions={true} title="Projects">
  <Container>
    <Header>
      <!-- <H1 class="font-display text-balance">A list of projects by Gus Cuddy</H1> -->
      <div class="flex justify-center items-center gap-6">
        <ProjectTabs />
        {Astro.url.search}
        <a href={`${Astro.url.pathname}?filter`}>
          <ListFilter size={16} />
        </a>
      </div>
      <ProjectFilter {tags} {technologies} client:only />
    </Header>
    <!-- <div class="w-fit mx-auto my-6 p-2 border bg-white text-black -rotate-0">
      Attention: This page is a work in progress.
    </div> -->

    <ul role="list" class="flex flex-col md:grid grid-cols-12 p-0 gap-8 mt-12">
      {
        projects.map((project) => (
          <li class={project.data.featured ? "col-span-12" : "col-span-6"}>
            <Card {project} />
          </li>
        ))
      }
    </ul>
  </Container>
</Layout>

<style>
  main {
    margin: auto;
    padding: 1rem;
    width: 64rem;
    max-width: calc(100% - 2rem);
    color: white;
    font-size: 20px;
    line-height: 1.6;
  }
  .astro-a {
    position: absolute;
    top: -32px;
    left: 50%;
    transform: translatex(-50%);
    width: 220px;
    height: auto;
    z-index: -1;
  }
  h1 {
    font-size: 4rem;
    font-weight: 700;
    line-height: 1;
    text-align: center;
    margin-bottom: 1em;
  }
  .text-gradient {
    background-image: var(--accent-gradient);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-size: 400%;
    background-position: 0%;
  }
  .instructions {
    margin-bottom: 2rem;
    border: 1px solid rgba(var(--accent-light), 25%);
    background: linear-gradient(
      rgba(var(--accent-dark), 66%),
      rgba(var(--accent-dark), 33%)
    );
    padding: 1.5rem;
    border-radius: 8px;
  }
  .instructions code {
    font-size: 0.8em;
    font-weight: bold;
    background: rgba(var(--accent-light), 12%);
    color: rgb(var(--accent-light));
    border-radius: 4px;
    padding: 0.3em 0.4em;
  }
  .instructions strong {
    color: rgb(var(--accent-light));
  }
  .link-card-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(36ch, 1fr));
    gap: 2rem;
    padding: 0;
  }
</style>
